"""
파이썬 메모리 모델 -
파이썬이 변수들의 메모리 공간을 관리하는 방법
"""
n1 = 1
print(f'주소 : {id(n1)}, 저장된 값 : {n1}')

n2 = n1
print(f'주소 : {id(n2)}, 저장된 값 : {n2}')

n2 = 2
print(f'주소 : {id(n2)}, 저장된 값 : {n2}')

n3 = 1
print(f'주소 : {id(n3)}, 저장된 값 : {n3}')
# 저장된 값이 정수와 문자열인 경우에는 생성된 객체를 캐싱함(재활용)

n3 = 3 - 1
print(f'주소 : {id(n3)}, 저장된 값 : {n3}')

# 숫자와 문자열을 제외한 다른 모든 객체들은 값이 사용될 때마다 새로 생성된다
f1 = 1/3
print(f'주소1 = {id(f1)}, 저장된 값 = {f1}')
f2 = 1/3
print(f'주소2 = {id(f2)}, 저장된 값 = {f2}')

c1 = 'abc'
print(f'주소1 = {id(c1)}, 저장된 값 = {c1}')
c2 = 'abc'
print(f'주소2 = {id(c2)}, 저장된 값 = {c2}')

l1 = [1, 2, 3]
print(f'주소1 = {id(l1)}, 저장된 값 = {l1}')
l2 = [1, 2, 100] # 기존의 리스트를 재활용하지 않고, 새로운 리스트 생성
print(f'주소2 = {id(l2)}, 저장된 값 = {l2}')
l3 = l2
print(f'주소3 = {id(l3)}, 저장된 값 = {l3}')

# l2 = [1, 2, 200]
# print(f'주소2 = {id(l2)}, 저장된 값 = {l2}')
# print(f'주소3 = {id(l3)}, 저장된 값 = {l3}')

l3.remove(1)
print(f'주소2 = {id(l2)}, 저장된 값 = {l2}')
print(f'주소3 = {id(l3)}, 저장된 값 = {l3}')

l4 = l2.copy()
print(f'주소2 = {id(l2)}, 저장된 값 = {l2}')
print(f'주소4 = {id(l4)}, 저장된 값 = {l4}')

# ==  연산자 VS is 연산자
a = [1, 2, 3]
b = [1, 2, 3]
print(f'==: {a==b}, is: {a is b}')

